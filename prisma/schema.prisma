generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ActionTypes {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(255)
  CollaboratorsActivities CollaboratorsActivities[]
}

model AuthProviders {
  id       Int        @id @default(autoincrement())
  name     String     @unique @db.VarChar(50)
  Accounts Accounts[]
}

model Business {
  id                      Int                       @id @default(autoincrement())
  name                    String?                   @db.VarChar(100)
  description             String?                   @db.VarChar(1000)
  email                   String?                   @db.VarChar(255)
  logoImage               String?                   @db.VarChar(500)
  bannerImage             String?                   @db.VarChar(500)
  address                 String?                   @db.VarChar(250)
  fullInformation         Boolean                   @default(false)
  rating_average          Float                     @default(0) @db.Real
  rating_count            Int                       @default(0)
  location_latitude       Decimal?                  @db.Decimal(11, 8)
  location_longitude      Decimal?                  @db.Decimal(11, 8)
  createdAt               DateTime                  @default(now()) @db.Timestamp(6)
  BusinessCategories      BusinessCategories[]
  BusinessLink            BusinessLink[]
  Cards                   Cards[]
  Collaborators           Collaborators[]
  CollaboratorsActivities CollaboratorsActivities[]
  FavoritesBusiness       FavoritesBusiness[]
  Ratings                 Ratings[]
  Subscriptions           Subscriptions[]
}

model BusinessCategories {
  idBusiness Int
  idCategory Int
  Business   Business   @relation(fields: [idBusiness], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Categories Categories @relation(fields: [idCategory], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([idBusiness, idCategory])
}

model CardStates {
  id           Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar(100)
  CardsClients CardsClients[]
}

model Cards {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(100)
  idBusiness   Int
  expiration   BigInt
  maxStamp     Int
  description  String         @db.VarChar(2000)
  restrictions String         @db.VarChar(500)
  reward       String         @db.VarChar(500)
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now()) @db.Timestamp(6)
  Business     Business       @relation(fields: [idBusiness], references: [id], onDelete: NoAction, onUpdate: NoAction)
  CardsClients CardsClients[]
}

model Categories {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique @db.VarChar(255)
  BusinessCategories BusinessCategories[]
}

model Collaborators {
  idAccount  Int
  idBusiness Int
  idRol      Int
  Account    Accounts @relation(fields: [idAccount], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Business   Business @relation(fields: [idBusiness], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Roles      Roles    @relation(fields: [idRol], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([idAccount, idBusiness])
}

model CollaboratorsActivities {
  id           Int         @id @default(autoincrement())
  idAccount    Int
  idBusiness   Int
  idActionType Int
  value        Int?
  createdAt    DateTime    @default(now()) @db.Timestamp(6)
  Account      Accounts    @relation(fields: [idAccount], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ActionTypes  ActionTypes @relation(fields: [idActionType], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Business     Business    @relation(fields: [idBusiness], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Links {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(100)
  BusinessLink BusinessLink[]
}

model Notifications {
  id                    Int                     @id @default(autoincrement())
  content               String                  @db.VarChar(500)
  link                  String?                 @db.VarChar(500)
  AccountsNotifications AccountsNotifications[]
}

model Plans {
  id            Int             @id @default(autoincrement())
  name          String          @unique @db.VarChar(255)
  Subscriptions Subscriptions[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Ratings {
  id         Int      @id @default(autoincrement())
  idClient   Int
  idBusiness Int
  valoration Int      @default(5) @db.SmallInt
  Business   Business @relation(fields: [idBusiness], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Client     Clients  @relation(fields: [idClient], references: [idAccount], onDelete: NoAction, onUpdate: NoAction)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Roles {
  id            Int             @id @default(autoincrement())
  name          String          @unique @db.VarChar(100)
  Collaborators Collaborators[]
}

model Accounts {
  id                      Int                       @id @default(autoincrement())
  email                   String                    @unique @db.VarChar(255)
  fullName                String                    @db.VarChar(255)
  password                String?                   @db.VarChar(255)
  idAuthProvider          Int
  isActive                Boolean                   @default(true)
  providerUserId          String?                   @db.VarChar(255)
  emailVerified           Boolean                   @default(false)
  profileImageURL         String?                   @db.VarChar(500)
  refreshToken            String?                   @db.VarChar(500)
  AuthProviders           AuthProviders             @relation(fields: [idAuthProvider], references: [id], onDelete: NoAction, onUpdate: NoAction)
  AccountsNotifications   AccountsNotifications[]
  Clients                 Clients?
  Collaborators           Collaborators[]
  CollaboratorsActivities CollaboratorsActivities[]
}

model Clients {
  idAccount         Int                 @id
  createdAt         DateTime            @default(now()) @db.Timestamp(6)
  CardsClients      CardsClients[]
  Accounts          Accounts            @relation(fields: [idAccount], references: [id], onDelete: NoAction, onUpdate: NoAction)
  FavoritesBusiness FavoritesBusiness[]
  Ratings           Ratings[]
}

model AccountsNotifications {
  id             Int           @id @default(autoincrement())
  idNotification Int
  idAccount      Int
  Accounts       Accounts      @relation(fields: [idAccount], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Notifications  Notifications @relation(fields: [idNotification], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model CardsClients {
  id             Int        @id @default(autoincrement())
  idClient       Int
  idCard         Int
  idCardState    Int
  expirationDate DateTime   @db.Timestamp(6)
  currentStamps  Int
  UniqueCode     String?    @unique @db.Char(8)
  CardStates     CardStates @relation(fields: [idCardState], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Cards          Cards      @relation(fields: [idCard], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Clients        Clients    @relation(fields: [idClient], references: [idAccount], onDelete: NoAction, onUpdate: NoAction)
}

model FavoritesBusiness {
  id         Int      @id @default(autoincrement())
  idBusiness Int
  idClient   Int
  Business   Business @relation(fields: [idBusiness], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Clients    Clients  @relation(fields: [idClient], references: [idAccount], onDelete: NoAction, onUpdate: NoAction)
}

model Subscriptions {
  id           Int       @id @default(autoincrement())
  idBusiness   Int
  idPlan       Int
  startDate    DateTime  @db.Timestamp(6)
  endDate      DateTime? @db.Timestamp(6)
  creationDate DateTime  @default(now()) @db.Timestamp(6)
  Business     Business  @relation(fields: [idBusiness], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Plans        Plans     @relation(fields: [idPlan], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model BusinessLink {
  idLInk     Int
  idBusiness Int
  value      String   @db.VarChar(255)
  Business   Business @relation(fields: [idBusiness], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Links      Links    @relation(fields: [idLInk], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([idLInk, idBusiness])
}
