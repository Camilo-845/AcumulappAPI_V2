generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ActionTypes {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(255)
  CollaboratorsActivities CollaboratorsActivities[]
}

model AuthProviders {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(50) @unique
  Accounts Accounts[]
}

model Business {
  id                      Int                       @id @default(autoincrement())
  name                    String?                   @db.VarChar(100)
  email                   String?                   @db.VarChar(255)
  idLocation              Int?
  logoImage               String?                   @db.VarChar(500)
  Address                 String?                   @db.VarChar(250)
  idPlan                  Int                       @default(1)
  fullInformation         Boolean                   @default(false)
  Locations               Locations?                @relation(fields: [idLocation], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Plans                   Plans                     @relation(fields: [idPlan], references: [id], onDelete: NoAction, onUpdate: NoAction)
  BusinessCategories      BusinessCategories[]
  Cards                   Cards[]
  Collaborators           Collaborators[]
  CollaboratorsActivities CollaboratorsActivities[]
  Links                   Links[]
  Numbers                 Numbers[]
  Ratings                 Ratings[]
}

model BusinessCategories {
  idBusiness Int
  idCategory Int
  Business   Business   @relation(fields: [idBusiness], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Categories Categories @relation(fields: [idCategory], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([idBusiness, idCategory])
}

model CardStates {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(100)
  CardsUsers CardsUsers[]
}

model Cards {
  id          Int          @id @default(autoincrement())
  idBusiness  Int
  expiration  BigInt
  maxStamp    Int
  description String       @db.VarChar(2000)
  Business    Business     @relation(fields: [idBusiness], references: [id], onDelete: NoAction, onUpdate: NoAction)
  CardsUsers  CardsUsers[]
}

model CardsUsers {
  id             Int        @id @default(autoincrement())
  idClient       Int
  idCard         Int
  idCardState    Int
  expirationDate DateTime   @db.Timestamp(6)
  currentStamps  Int
  UniqueCode     String?    @db.Char(8)
  CardStates     CardStates @relation(fields: [idCardState], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Cards          Cards      @relation(fields: [idCard], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Client         Clients    @relation(fields: [idClient], references: [idAccount], onDelete: NoAction, onUpdate: NoAction)
}

model Categories {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  BusinessCategories BusinessCategories[]
  Preferences        Preferences[]
}

model Collaborators {
  idAccount  Int
  idBusiness Int
  idRol      Int
  Account    Accounts @relation(fields: [idAccount], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Business   Business @relation(fields: [idBusiness], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Roles      Roles    @relation(fields: [idRol], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([idAccount, idBusiness])
}

model CollaboratorsActivities {
  id           Int         @id @default(autoincrement())
  idAccount    Int
  idBusiness   Int
  idActionType Int
  oldValue     String?     @db.VarChar(255)
  newValue     String?     @db.VarChar(255)
  Account      Accounts    @relation(fields: [idAccount], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ActionTypes  ActionTypes @relation(fields: [idActionType], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Business     Business    @relation(fields: [idBusiness], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Links {
  id         Int      @id @default(autoincrement())
  idBusiness Int
  value      String   @db.VarChar(500)
  Business   Business @relation(fields: [idBusiness], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model LocationTypes {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(150)
  Locations Locations[]
}

model Locations {
  id              Int           @id @default(autoincrement())
  idFather        Int
  idLocationType  Int
  name            String        @db.VarChar(255)
  Business        Business[]
  Locations       Locations     @relation("LocationsToLocations", fields: [idFather], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_Locations Locations[]   @relation("LocationsToLocations")
  LocationTypes   LocationTypes @relation(fields: [idLocationType], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Notifications {
  id                 Int                  @id @default(autoincrement())
  content            String               @db.VarChar(500)
  link               String?              @db.VarChar(500)
  UsersNotifications UsersNotifications[]
}

model Numbers {
  id         Int      @id @default(autoincrement())
  idBusiness Int
  value      String   @db.VarChar(20)
  Business   Business @relation(fields: [idBusiness], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Plans {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(255)
  Business Business[]
}

model Preferences {
  idClient   Int        @default(autoincrement())
  idCategory Int
  Categories Categories @relation(fields: [idCategory], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Client     Clients    @relation(fields: [idClient], references: [idAccount], onDelete: NoAction, onUpdate: NoAction)

  @@id([idClient, idCategory])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Ratings {
  id         Int      @id @default(autoincrement())
  idClient   Int
  idBusiness Int
  valoration Int      @default(5) @db.SmallInt
  Business   Business @relation(fields: [idBusiness], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Client     Clients  @relation(fields: [idClient], references: [idAccount], onDelete: NoAction, onUpdate: NoAction)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Roles {
  id            Int             @id @default(autoincrement())
  name          String          @unique @db.VarChar(100)
  Collaborators Collaborators[]
}

model UsersNotifications {
  id             Int           @id @default(autoincrement())
  idNotification Int
  idClient       Int
  Client         Clients       @relation(fields: [idClient], references: [idAccount], onDelete: NoAction, onUpdate: NoAction)
  Notifications  Notifications @relation(fields: [idNotification], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Accounts {
  id                      Int                       @id @default(autoincrement())
  email                   String                    @unique @db.VarChar(255)
  fullName                String                    @db.VarChar(255)
  password                String?                   @db.VarChar(255)
  idAuthProvider          Int
  isActive                Boolean                   @default(true)
  providerUserId          String?                   @db.VarChar(255)
  emailVerified           Boolean                   @default(false)
  profileImageURL         String?                   @db.VarChar(500)
  AuthProviders           AuthProviders             @relation(fields: [idAuthProvider], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Clients                 Clients?
  Collaborators           Collaborators[]
  CollaboratorsActivities CollaboratorsActivities[]
}

model Clients {
  idAccount          Int                  @id
  CardsUsers         CardsUsers[]
  Accounts           Accounts             @relation(fields: [idAccount], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Preferences        Preferences[]
  Ratings            Ratings[]
  UsersNotifications UsersNotifications[]
}
