name: CD Production Deploy

on:
  push:
    branches:
      - Develop
      - Production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/acumulapp_api:latest

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Autenticación en Docker Hub en el servidor
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # Bajar la nueva imagen
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/acumulapp_api:latest

            # Detener y remover el contenedor viejo
            docker stop my-api || true
            docker rm my-api || true

            # Crear un archivo .env temporal con las variables de GitHub Actions
            cat <<EOF > .env.production
            PORT=${{ vars.PORT }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRES_IN=${{ vars.JWT_EXPIRES_IN }}
            JWT_REFRESH_EXPIRES_IN=${{ vars.JWT_REFRESH_EXPIRES_IN }}
            BASE_URL=${{ vars.BASE_URL }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION=${{ vars.AWS_REGION }}
            AWS_BUCKET_NAME=${{ vars.AWS_BUCKET_NAME }}
            FREE_PLAN_MAX_ACTIVE_CLIENT_CARDS=${{ vars.FREE_PLAN_MAX_ACTIVE_CLIENT_CARDS }}
            FREE_PLAN_MAX_CARDS=${{ vars.FREE_PLAN_MAX_CARDS }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            EOF

            # Iniciar el nuevo contenedor usando el archivo .env temporal
            docker run -d --name my-api -p 80:8080 --env-file .env.production ${{ secrets.DOCKERHUB_USERNAME }}/acumulapp_api:latest

            # Opcional: Eliminar el archivo .env temporal por seguridad
            rm .env.production

            # Limpiar imágenes no usadas
            docker image prune -f -a
