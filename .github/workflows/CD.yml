name: CD Production Deploy

on:
  push:
    branches:
      - Develop
      - Production

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Define el entorno de despliegue.
    # Nota: Tu workflow se activa en 'Develop' y 'Production',
    # pero el 'environment' es 'production'. Considera crear un entorno 'develop'
    # para usar variables específicas de ese entorno si fuera necesario.
    environment: production
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # Se recomienda usar una etiqueta específica además de 'latest'
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/acumulapp_api:latest

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Autenticación en Docker Hub en el servidor
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # Bajar la nueva imagen
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/acumulapp_api:latest

            # Detener y remover el contenedor viejo
            docker stop my-api || true
            docker rm my-api || true
            
            # Comando único para ejecutar el contenedor con todas las variables de entorno
            docker run -d --name my-api -p 80:${{ vars.PORT }} -e PORT=${{ vars.PORT }} -e JWT_SECRET=${{ secrets.JWT_SECRET }} -e JWT_EXPIRES_IN=${{ vars.JWT_EXPIRES_IN }} -e JWT_REFRESH_EXPIRES_IN=${{ vars.JWT_REFRESH_EXPIRES_IN }} -e BASE_URL=${{ vars.BASE_URL }} -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} -e AWS_REGION=${{ vars.AWS_REGION }} -e AWS_BUCKET_NAME=${{ vars.AWS_BUCKET_NAME }} -e FREE_PLAN_MAX_ACTIVE_CLIENT_CARDS=${{ vars.FREE_PLAN_MAX_ACTIVE_CLIENT_CARDS }} -e FREE_PLAN_MAX_CARDS=${{ vars.FREE_PLAN_MAX_CARDS }} ${{ secrets.DOCKERHUB_USERNAME }}/acumulapp_api:latest
            
            # Limpiar imágenes no usadas para liberar espacio
            docker image prune -f -a
